---
- name: Ansible provisioning
  hosts: all
  become: yes
  become_user: root
  vars:
  vars_files:
     networks.yml  
  tasks:
    - name: install needed packages
      package:
        name: 
          - "apt-transport-https" 
          - "curl"
          - "software-properties-common"
        state: latest
        
    - name: enable empty password
      lineinfile: 
        path: /etc/ssh/sshd_config
        regexp: '^PermitEmptyPasswords'
        line: 'PermitEmptyPasswords yes'
        state: present
        
    - name: permit root login
      lineinfile: 
        path: /etc/ssh/sshd_config
        regexp: '^PermitRootLogin'
        line: 'PermitRootLogin yes'
        state: present
        
    - name: permit password Authentification
      lineinfile: 
        path: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: 'PasswordAuthentication yes'
        state: present
      register: sshdconfig
        
    - name: restart sshd service
      service:  name=sshd  state=restarted
      when: sshdconfig is changed
      
    - name: Make sure we have a 'wheel' group
      group:
         name: wheel
         state: present

    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
          dest: /etc/sudoers
          state: present
          regexp: '^%wheel'
          line: '%wheel ALL=(ALL) NOPASSWD: ALL'
          validate: 'visudo -cf %s'
          
    - name: add apt repo for docker
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable 
        state: present
        filename: docker
        update_cache: yes
        
        
    - name: install container runtime   
      package:
        name:
          - "containerd.io" 
        state: present
        force: yes

    - name: update containerd config.toml
      lineinfile:
          path: "{{containerd_config_toml_path}}"
          regexp: "^disabled_plugins"
          line: "#disabled_plugins = []"
          state: present

    - name: restart containerd service
      service: 
        name: containerd
        state: restarted
        
    - name: remove swap
      lineinfile: 
        path: /etc/fstab
        regexp: 'swap'
        state: absent
    
    - name: Set vm.swappiness to 0 in /etc/sysctl.conf
      sysctl:
        name: vm.swappiness
        value: '0'
        state: present

        
    - name: disable swap
      command: "swapoff -a"
        
    - name: ensure ufw is running
      service:
        name: ufw
        state: started
        enabled: yes
                        
    
    - name: open all ports nodes   
      ufw:
        rule: allow
        port: "{{item.ports}}"
        proto: "{{item.proto}}"
      with_items:
       - {proto: 'tcp', ports: '10250'}
       - {proto: 'tcp', ports: '30000:32767'}
       - {proto: 'tcp', ports: '7946'}
       - {proto: 'udp', ports: '7946'}

    - name: Ensure br_netfilter is enabled.
      modprobe:
        name: br_netfilter
        state: present

    - name: configure sysctl
      sysctl:
        name: "{{item}}"
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
      with_items:
        - net.bridge.bridge-nf-call-ip6tables 
        - net.bridge.bridge-nf-call-iptables 
        - net.ipv4.ip_forward
        
    - name: add apt key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present  
        
    - name: add apt repo
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main 
        state: present
        filename: kubernetes
        update_cache: yes
        
    - name: install kubeadm
      package:
        state: present
        name:
          - "kubelet={{kubelet_version}}"
          - "kubeadm={{kubernetes_version}}"
          - "kubectl={{kubernetes_version}}"

    - name: Hold packages
      dpkg_selections:
        name: "{{item}}"
        selection: hold
      with_items:
        - kubelet
        - kubeadm
        - kubectl

    - name: get kubelet extra args file if debian flavour
      set_fact:  
        kublet_extra_file: /etc/default/kubelet
      when: ansible_os_family == "Debian"

    - name: get kubelet extra args file if redhat flavour
      set_fact:  
        kublet_extra_file: /etc/sysconfig/kubelet
      when: ansible_os_family == "Redhat"
   

    - name: update kubelet extra args
      lineinfile:
          path: "{{kublet_extra_file}}"
          regexp: 'KUBELET_EXTRA_ARGS="--node-ip={{ansible_facts[kubelet_net_interface].ipv4.address}}"'
          line: 'KUBELET_EXTRA_ARGS="--node-ip={{ansible_facts[kubelet_net_interface].ipv4.address}} "'
          state: present
          create: yes
      register: kubelet_extra_config

    - name: update kubelet kubeadm args
      lineinfile:
          path: "{{kublet_extra_file}}"
          regexp: 'KUBELET_KUBEADM_ARGS'
          line: 'KUBELET_KUBEADM_ARGS="--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock"'
          state: present
          create: yes
      register: kubelet_kubeadm_config

    - name: restart kubelet 
      service:
        name: kubelet
        state: restarted
      when: kubelet_extra_config is changed 

    - name: join the cluster
      command: "{{item}}"
      with_file: joincmd.txt    
      register: joinout
      args:
        creates: /etc/kubernetes/kubelet.conf

    - fail:
        msg: "could not join the kubernets cluster"
      when:
       - joinout is failed 

    - name: get kubelet extra args file if debian flavour
      set_fact:  
        kublet_extra_file: /etc/default/kubelet
      when: ansible_os_family == "Debian"

    - name: get kubelet extra args file if redhat flavour
      set_fact:  
        kublet_extra_file: /etc/sysconfig/kubelet
      when: ansible_os_family == "Redhat"

    - name: update kubelet extra args
      lineinfile:
          path: "{{kublet_extra_file}}"
          regexp: 'KUBELET_EXTRA_ARGS="--node-ip={{ansible_facts[kubelet_net_interface].ipv4.address}}"'
          line: 'KUBELET_EXTRA_ARGS="--node-ip={{ansible_facts[kubelet_net_interface].ipv4.address}}"'
          state: present
          create: yes
      register: kubelet_extra_config

    - name: restart kubelet 
      service:
        name: kubelet
        state: restarted
      when: kubelet_extra_config is changed       
... 
