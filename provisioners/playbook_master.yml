---
- name: Ansible provisioning
  hosts: all
  become: yes

  vars:
    # os user for which will create kubectl config
    kubectl_os_user: hichem
    apiserver_advertise_address: 196.168.121.20  
    # valid networks are listed in networks.yml
    network: "calico"
    # taint or no the master node
    taint_master_node: no
    # metallb ip pool addresses
    metallb_ip_pool: 196.168.121.200-196.168.121.250
    #metallb_version: v0.9.5
  
  vars_files:
    - networks.yml
    - metallb-config.yml
  tasks:
    - name: install needed packages
      package:
        name: 
          - apt-transport-https 
          - curl
          - software-properties-common


        state: latest
        
    - name: enable empty password
      lineinfile: 
        path: /etc/ssh/sshd_config
        regexp: '^PermitEmptyPasswords'
        line: 'PermitEmptyPasswords yes'
        state: present
        
    - name: permit root login
      lineinfile: 
        path: /etc/ssh/sshd_config
        regexp: '^PermitRootLogin'
        line: 'PermitRootLogin yes'
        state: present
        
    - name: permit password Authentification
      lineinfile: 
        path: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: 'PasswordAuthentication yes'
        state: present
      register: sshdconfig
        
    - name: restart sshd service
      service:  name=sshd  state=restarted
      when: sshdconfig is changed
      
    - name: Make sure we have a 'wheel' group
      group:
         name: wheel
         state: present

    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
          dest: /etc/sudoers
          state: present
          regexp: '^%wheel'
          line: '%wheel ALL=(ALL) NOPASSWD: ALL'
          validate: 'visudo -cf %s'
          
    - name: add apt repo for docker
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable 
        state: present
        filename: docker
        update_cache: yes
        
        
    - name: install container runtime   
      package:
        state: present
        name:
          - "containerd.io" 
        force: yes
        

    - name: update containerd config.toml
      lineinfile:
          path: "{{containerd_config_toml_path}}"
          regexp: "^disabled_plugins"
          line: "#disabled_plugins = []"
          state: present

    - name: restart containerd service
      service: 
        name: containerd
        state: restarted

    - name: remove swap
      lineinfile: 
        path: /etc/fstab
        regexp: 'swap'
        state: absent
        
    - name: Set vm.swappiness to 0 in /etc/sysctl.conf
      sysctl:
        name: vm.swappiness
        value: '0'
        state: present
        sysctl_set: yes
        reload: yes

    - name: disable swap
      command: "swapoff -a"
      
    - name: ensure ufw is running
      service:
        name: ufw
        state: started
        enabled: yes
                        
    
    - name: open all ports for master     
      ufw:
        rule: allow
        port: "{{item.ports}}"
        proto: "{{item.proto}}"
      with_items:
       - {proto: 'tcp', ports: '6443'}
       - {proto: 'tcp', ports: '2379:2380'}
       - {proto: 'tcp', ports: '10250'}
       - {proto: 'tcp', ports: '10251'}
       - {proto: 'tcp', ports: '10252'}

    - name: Ensure br_netfilter is enabled.
      modprobe:
        name: br_netfilter
        state: present
   
    - name: configure sysctl
      sysctl:
        name: "{{item}}"
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
      with_items:
        - net.bridge.bridge-nf-call-ip6tables 
        - net.bridge.bridge-nf-call-iptables 
        - net.ipv4.ip_forward



    - name: add apt key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present  
        
    - name: add apt repo
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main 
        state: present
        filename: kubernetes
        update_cache: yes
        
    - name: install kubeadm
      package:
        state: present
        name:
          - "kubelet={{kubernetes_version}}"
          - "kubeadm={{kubelet_version}}"
          - "kubectl={{kubernetes_version}}"
    
    - name: add helm repo key
      apt_key:
         url: https://baltocdn.com/helm/signing.asc
         state: present

    - name: add helm repo
      apt_repository:
        repo:  "deb https://baltocdn.com/helm/stable/debian/ all main"
        state: present
        update_cache: yes

    - name: install helm
      package:
        name: helm
        state: present

    - name: get kubelet extra args file if debian flavour
      set_fact:  
        kublet_extra_file: /etc/default/kubelet
      when: ansible_os_family == "Debian"

    - name: get kubelet extra args file if redhat flavour
      set_fact:  
        kublet_extra_file: /etc/sysconfig/kubelet
      when: ansible_os_family == "Redhat"
   

    - name: update kubelet extra args
      lineinfile:
          path: "{{kublet_extra_file}}"
          regexp: 'KUBELET_EXTRA_ARGS="--node-ip={{ansible_facts[kubelet_net_interface].ipv4.address}}"'
          line: 'KUBELET_EXTRA_ARGS="--node-ip={{ansible_facts[kubelet_net_interface].ipv4.address}} "'
          state: present
          create: yes
      register: kubelet_extra_config

    - name: update kubelet kubeadm args
      lineinfile:
          path: "{{kublet_extra_file}}"
          regexp: 'KUBELET_KUBEADM_ARGS'
          line: 'KUBELET_KUBEADM_ARGS="--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock"'
          state: present
          create: yes
      register: kubelet_kubeadm_config

    - name: restart kubelet 
      service:
        name: kubelet
        state: restarted
      when: kubelet_extra_config is changed 


    - name: initialize the cluster
      shell: "kubeadm init --pod-network-cidr={{ networks[network]['pod_network_cidr'] }} --apiserver-advertise-address {{apiserver_advertise_address}} "
      register: kubeadm_out
      args:
       creates: /etc/kubernetes/admin.conf  
       
    - name: print output
      debug:
        msg: "{{kubeadm_out}}"    
        
    - name: get results localy
      copy:
        content: "{{kubeadm_out.stdout}}"
        dest: kubeadm.out
        force: yes
      delegate_to: localhost
      when: kubeadm_out is changed
    


    - name: Get token
      set_fact:
         token: "{{ item | regex_search(' --token (.*) ')  }}"
      with_file: kubeadm.out
      delegate_to: localhost
      
    - name: Get token_ca_cert
      set_fact:
         token_ca_cert: "{{ item | regex_search(' --discovery-token-ca-cert-hash (.*)')  }}"
      with_file: kubeadm.out
      delegate_to: localhost
    
    - name: generate join cmd
      copy:
        content: "kubeadm join {{apiserver_advertise_address}}:6443 {{token}} {{token_ca_cert}}"  
        dest: joincmd.txt
      delegate_to: localhost
        
    - name: create .kube dir
      file:
            path: /home/vagrant/.kube
            state: directory
            owner: vagrant
            group: vagrant
            
    - name: create config file
      copy:
            src: /etc/kubernetes/admin.conf
            remote_src: yes
            dest: /home/vagrant/.kube/config
            owner: vagrant
            group: vagrant
    
    - name: get state of pods network
      shell:  export KUBECONFIG=/etc/kubernetes/admin.conf; kubectl get pods --all-namespaces 
      register: podnets
      
    - name: extract state of coredns
      set_fact:
         coredns: "{{ podnets is search('coredns')  }}"
    
    - debug:
        var: networks[network]
          
    - name: create a pod network
      shell: "export KUBECONFIG=/etc/kubernetes/admin.conf; kubectl apply -f {{networks[network]['yamlurl']}}"
      when: not coredns
      register: createnet
      
       
    - fail:
         msg: "could not install pod network"
      when: createnet is failed
      
    - name: Control plane node isolation
      shell: "export KUBECONFIG=/etc/kubernetes/admin.conf; kubectl taint nodes --all node-role.kubernetes.io/master-"
      register: tainted
      when: taint_master_node
      
    - name: deploy Dashboard
      shell: "export KUBECONFIG=/etc/kubernetes/admin.conf; kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended.yaml"
      when: not coredns

    - name: deploy metallb load balancer
      shell: |
        export KUBECONFIG=/etc/kubernetes/admin.conf; 
        kubectl apply -f "https://raw.githubusercontent.com/metallb/metallb/main/manifests/namespace.yaml"
        kubectl apply -f "https://raw.githubusercontent.com/metallb/metallb/main/manifests/metallb.yaml"
        kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
        echo "{{metallb_config}}" | kubectl apply -f -
      when: not coredns


    - name: Install ingress-nginx helm chart 
      shell: |
         export KUBECONFIG=/etc/kubernetes/admin.conf; 
         kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/baremetal/deploy.yaml
      when: not coredns
      
    - name: get last metric server deployment file
      get_url:
        url: https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
        dest: metric-server.yaml
      delegate_to: localhost
      when: not coredns

    - name: use insecure mode for metric server because of self signed certificate
      replace:
         path: ./metric-server.yaml
         regexp: '(\s+)- --secure-port=4443'
         replace: '\1- --secure-port=4443\1- --kubelet-insecure-tls'
      when: not coredns
      delegate_to: localhost

    - name: Install metric server
      shell: |
         export KUBECONFIG=/etc/kubernetes/admin.conf; 
         cat <<EOF | kubectl apply -f - 
         {{item}}
         EOF
      when: not coredns
      with_file: ./metric-server.yaml

    - name: Install prometheus and Grafana for ingress-nginx 
      shell: |
         export KUBECONFIG=/etc/kubernetes/admin.conf; 
         kubectl apply --kustomize github.com/kubernetes/ingress-nginx/deploy/prometheus/ ;
         kubectl apply --kustomize github.com/kubernetes/ingress-nginx/deploy/grafana/ ;
      when: not coredns
      

    - name: remove old kubectl config
      file:
         path: "/home/{{kubectl_os_user}}/.kube/config"
         state: absent
      delegate_to: localhost

    - name: configure localhost kubectl
      fetch:
        dest: "/home/{{kubectl_os_user}}/.kube/"
        flat: yes
        src: /home/vagrant/.kube/config
    

    
... 
